/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <220>;
};

&mt {
    quick_tap_ms = <220>;
};

/ {
    macros {
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------
            //| LGUI/] |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | RGUI/[ | 
            //| CTRL/` |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | CTRL/' |
            //| LALT/\ |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT/- |
            //                             | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&kp GRAVE  &kp Q  &kp W  &kp E     &kp R      &kp T         &kp Y      &kp U      &kp I        &kp O    &kp P     &kp LBKT
&kp CAPS   &kp A  &kp S  &kp D     &kp F      &kp G         &kp H      &kp J      &kp K        &kp L    &kp SEMI  &kp SQT
&kp LALT   &kp Z  &kp X  &kp C     &kp V      &kp B         &kp N      &kp M      &kp COMMA    &kp DOT  &kp FSLH  &kp RBKT
                         &kp LGUI  &kp LCTRL  &lt 1 LSHIFT  &lt 2 ESC  &kp SPACE  &key_repeat
            >;

            label = "default";
        };

        shift_layer {
            // -----------------------------------------------------------------------------------------
            //| LGUI |  VOLU  |  PGUP  | PLAY | HOME | ___  |            | ___  | HOME | PLAY| PGUP | VOLU | RGUI |
            //| CTRL |  VOLD  |  LEFT  |  UP  | DOWN | RGHT |            | RGHT | DOWN | UP  | LEFT | VOLD | CTRL | 
            //| LALT |  MUTE  |  PGDN  |  ___ | END  | ___  |            | ___  | END  | ___ | PGDN | MUTE | RALT |
            //                          | ___ | ___  | ADJ  |            | ADJ  | ___  | ___ |

            bindings = <
&kp TILDE  &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)  &kp LS(Y)  &kp LS(U)  &kp LS(I)      &kp LS(O)    &kp LS(P)          &kp LBRC
&trans     &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)  &kp LS(H)  &kp LS(J)  &kp LS(K)      &kp LS(L)    &kp LS(SEMICOLON)  &kp DOUBLE_QUOTES
&trans     &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)  &kp LS(N)  &kp LS(M)  &kp LS(COMMA)  &kp LS(DOT)  &kp LS(FSLH)       &kp RIGHT_BRACE
                                 &trans     &trans     &trans     &trans     &trans     &trans
            >;

            label = "shift";
        };

        special_layer {
            // -----------------------------------------------------------------------------------------
            //|LGUI/CAPS |  *  |  7 |  8  |  9  |  +  |    |  !  |  @  |  #  |  $  |  %  | RGUI/F1 |
            //|CTRL/MENU |  /  |  4 |  5  |  6  |  -  |    |  ^  |  &  |  *  |  (  |  )  | CTRL/F2 |
            //|  LALT/=  |  0  |  1 |  4  |  3  |  .  |    |  ls |  F4 |  F5 |  F6 |  F7 | RALT/F3 |
            //                      | ADJ | ___ | ___ |    | ___ | ___ | ADJ |

            bindings = <
&kp TILDE  &kp EXCL       &kp AT    &kp HASH    &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LPAR         &kp RPAR   &kp LEFT_BRACE
&trans     &sk LGUI       &sk LALT  &sk LSHIFT  &sk LCTRL   &kp UNDER    &kp LEFT   &kp DOWN       &kp UP        &kp RIGHT        &kp ENTER  &kp BACKSPACE
&trans     &kp BACKSLASH  &kp PIPE  &kp PLUS    &kp MINUS   &kp EQUAL    &kp TAB    &kp END        &kp HOME      &kp PRINTSCREEN  &kp DEL    &kp RIGHT_BRACE
                                    &trans      &trans      &trans       &trans     &kp MINUS      &kp PLUS
            >;

            label = "spec";
        };

        numbers_layer {
            // -----------------------------------------------------------------------------------------
            //| BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR |
            //| BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //|pwrOFF|NUMLK|     |     |     |     |   |     |     |     |     |     |      |
            //                   |     |     |     |   |     |     |     |

            bindings = <
&bootloader  &kp N1        &kp N2        &kp N3        &kp N4        &kp N5        &kp N6      &kp N7             &kp N8           &kp N9      &kp N0            &bootloader
&kp F12      &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6      &kp F7             &kp F8           &kp F9      &kp F10           &kp F11
&bt BT_CLR   &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kp C_PLAY_PAUSE  &kp C_MUTE
                                         &trans        &trans        &trans        &trans      &trans             &trans
            >;

            label = "num";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        trilayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
